#!/bin/sh
. /usr/share/sourcemgr/repository

set -e
trap 'usage; exit 1' 0

usage() {
cat >&2 <<END
Usage: $(basename $0)  -- Send updates to the master
       [ -d package ] [ -v branch ]
	   [ -p (wenn neu: speichere nach /public/) ]

This is "bk push", except that it always uses the BK_REPOSITORY.
It also reports remote changes in a somewhat more nice way.
It also sends the whole repository if the remove doesn't have it yet.
END
}

vers=-
dir=
vset=
pub=

   eval set -- "$(getopt "d:pv:h" "$@")"
   for i
   do
	   case "$i"
	   in
		   -h)
		       exit 1 ;;
		   -d)
			   shift; dir="$1"; shift;;
		   -v)
			   shift; vers="$1"; vset=1; shift;;
		   -p)
			   shift; pub="public/" ;;
			--)
				shift; break ;;
	   esac
   done

trap '' 0

b.name "$dir" >/tmp/bn.$$
read dir overs </tmp/bn.$$
rm -f /tmp/bn.$$
if test -z "$vset" ; then
	test -z "$overs" || vers="$overs"
fi

what=$(echo $dir | sed -e 's/\//_/g' -e 's/_*$//')

if b.exists -v "$vers" -d $dir > /tmp/tf.$$ ; then 
	read what dv < /tmp/tf.$$
	rm -f /tmp/tf.$$
	if test -z "$what" ; then echo >&2 "'$dir' not found" ; exit 1 ; fi

	test -z "$vers" -o "$vers" = "-" || dv="-$vers"

	if bk pull -n $BK_REPOSITORY/$what$dv 2>&1 | grep -q "Would receive" ; then
		cat >&2 <<END
Problem:
The repository "$what$dv" has changes which you don't have.

You can:
- use b.merge first
- upload a new branch (use the "-v branch" option)
END
	else
		echo + bk push $BK_REPOSITORY/$what$dv
		bk push $BK_REPOSITORY/$what$dv
		# Update cache now.
		##echo + bk push CACHE
		##bk push -q . $(b.cache -d "$what" -v $vers -n)
	fi
else
	dv=
	test -z "$vers" -o "$vers" = "-" || dv="-$vers"
	echo "Branch '$vers' doesn't exist -- it will be created."
	echo + bk clone . $BK_REPOSITORY/$pub$what$dv
	bk clone . $BK_REPOSITORY/$pub$what$dv
fi

