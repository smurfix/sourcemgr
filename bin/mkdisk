#!/bin/sh

PATH=/usr/src/STATUS/bin:/usr/sbin:/sbin:/usr/local/bin:/usr/bin:/bin
LIBC=2.1.3

usage() {
cat >&2 <<END
Usage: $0
       [ -f | -F /dev/fd0 | -I(mage) ] [ -m MEMSIZE ]
       [ -s ramdisksize ]  [ -S imagesize ] [ -g(enerate ROMFS) ]
       [ -l(ilo) ] [ -v Kernelversion ] [ -p(rerun the disk's shell) ]
       [ -n(et) -d(ebug) -w X (serial wire X, usually 1) ]
       [ -r(un without stop in linuxrc) ] [ -R RootDevice ]
#      [ -N(ew floppy, superformat, sect=18 cyl=82 ] [ -o ramdiskfile ]
       [ -k fqname-der-kiste ] [ -P (pcmcia-Kram) ] [ -c libcversion ]
       [ -G (use stripped glibc) ] [ kernel (pci, adaptec, 2.1, ...) ]
END
exit 1
}

cd /usr/src || die "No sources"

lib=/lib
size=3500
imgsize=
fifo=/tmp/pipe.$$
fd=
format=
run=
net=
ver=
debug=
serial=
prerun=
rootdev=
romfs=
kiste=
dest=
static=
MEM=
if test -f STATUS/done/kernel:lilo ; then
wherelilo=done
else
wherelilo=legacy
fi

   set -- $(getopt dfF:P:Ilnps:S:rR:v:w:m:Ngk:o:hc:G $*)
   if test $? != 0
   then
	   usage
   fi
   for i
   do
	   case "$i"
	   in
	   	   -h)
               usage ;;
		   -c)
			   LIBC=$2; shift; shift;;
		   -g)
		       romfs=y; shift;;
		   -G)
		       lib=/usr/local/glibc/lib; shift;;
	       -p)
		   	   prerun=y; shift;;
	       -w)
		       serial=$2; shift; shift;;
		   -P)
		       pcmcia=y; shift ;;
		   -d)
			   debug=y; shift;;
		   -k)
			   kiste=$2; shift; shift;;
		   -I)
			   fd=IMAGE; shift;;
		   -o)
			   dest=$2; shift; shift;;
		   -F)
			   fd=$2; shift; shift;;
		   -v)
			   ver=$2; shift; shift;;
		   -f)
			   fd=/dev/fd0; shift;;
	   	   -N)
	   		   fd=/dev/fd0; format=y; shift;;
		   -r)
			   run=y; shift;;
		   -S)
			   imgsize=$2; shift; shift;;
		   -s)
			   size=$2; shift; shift;;
		   -n)
			   net="net-"; shift;;
		   -R)
			   root=$2; rootdev=$(perl -e "printf '0x%x',(stat('$root'))[0]"); shift; shift;;
		   -m)
			   MEM="mem=${2}M"; shift; shift;;
		   -l)
			   lilo=y; shift;;
		   --)
			   shift; break;;
	   esac
   done

#if test -n "$run" -a -z "$net" ; then
if test -n "$run" ; then
   static=y
fi
if test "$1" = "-" ; then sys="" ; else sys=-${1:-"pci"} ; fi
disk=/tmp/disk-$sys
diskfile=/tmp/diskfile-$sys

sver=$(echo $ver | sed -e 's/noris/n/g' -e 's/pre/p/g') 
set -e

if test -z "$ver" ; then
	rm -f $fifo; mkfifo $fifo
	( cd /lib/modules$sys; /bin/ls -r1 | grep '^[0-9]' | while read a ; do if test -d $a; then echo $a; fi; done > $fifo ) &
	read ver <$fifo ; rm $fifo
fi

if test "$fd" = "IMAGE" ; then
  fd=/boot$sys/floppy-$net$ver
fi

echo 'Unmounting..?'
umount $disk || true

if test -n "$romfs" ; then
	rm -rf $disk
	mkdir $disk

else
	rm -rf $disk $diskfile

	dd bs=1024 count=$size if=/dev/zero of=$diskfile
	set +e
	/sbin/mkfs.ext2 -m 0 -i 20000 -b 1024 $diskfile $size
	set -e
	mkdir $disk
	echo Mounting disk file
	mount -t ext2 -o loop $diskfile $disk
fi

if test -z "$static" ; then
	while read a ; do echo /$a; mkdir $disk/$a; done <<END
cd
mnt
END
	while read a ; do echo /$a "=>" /cd/$a; mkdir $disk/cd/$a; ln -s cd/$a $disk/$a; done <<END
var
usr
sbin
lib
END
	while read a ; do echo /$a; mkdir $disk/$a; done <<END
bin
dev
etc
etc/terminfo
mnt1
mnt2
mnt3
proc
usr/lib
usr/sbin
fd
var/run
var/tmp
END
	ln -s cd/var/tmp $disk/tmp
	if test "$lib" != "/lib" ; then
		mkdir -p $(dirname $disk$lib)
		echo ln -s ../../../lib $disk$lib
		ln -s ../../../lib $disk$lib
	fi

	if test -n "$net" ; then ## Netz
		cpio -pvdL $disk <<END
/sbin/route
/sbin/ifconfig
/sbin/ipwhat
/usr/sbin/portmap
/usr/sbin/rpc.mountd
/usr/sbin/rpc.nfsd
$lib/libnss_files-$LIBC.so
$lib/libnss_files.so.1
END
		sed -e 's/files.*/files/' </etc/nsswitch.conf >$disk/etc/nsswitch.conf
	else
		cpio -pvdL $disk <<END
/sbin/fdisk
/sbin/mkfs.ext2
/sbin/fsck.ext2
/sbin/swapon
/sbin/mkswap
END
	fi

	cpio -pvdL $disk <<END
/bin/ls
/bin/ln
/bin/cat
/bin/cp
/bin/dd
/bin/rm
/bin/mv
/bin/mount
/bin/umount
/sbin/insmod
/sbin/update
END

	find $disk/bin/ $disk/sbin/ -type f -print|xargs strip 
	ln -s /cd/bin/bash $disk/bin/bash

	cpio -pvdL $disk <<END
/dev/zero
/dev/null
/dev/tty
/dev/tty1
/dev/console
/dev/ttyS0
/dev/ttyS1
/dev/hda
/dev/hda1
/dev/hda2
/dev/hda3
/dev/hda4
/dev/hda5
/dev/hda6
/dev/hda7
/dev/hda8
/dev/hdb
/dev/hdb1
/dev/hdb2
/dev/hdb3
/dev/hdb4
/dev/hdb5
/dev/hdb6
/dev/hdb7
/dev/hda
/dev/hdc1
/dev/hdc2
/dev/hdc3
/dev/hdc4
/dev/hdc5
/dev/hdc6
/dev/hdc7
/dev/hdd
/dev/hdd1
/dev/hdd2
/dev/hdd3
/dev/hdd4
/dev/hdd5
/dev/hdd6
/dev/hdd7
/dev/sda
/dev/sda1
/dev/sda2
/dev/sda3
/dev/sda4
/dev/sda5
/dev/sda6
/dev/sda7
/dev/sda8
/dev/sdb
/dev/sdb1
/dev/sdb2
/dev/sdb3
/dev/sdb4
/dev/sdb5
/dev/sdb6
/dev/sdb7
/dev/sdb8
/dev/sdc
/dev/sdc1
/dev/sdc2
/dev/sdc3
/dev/sdc4
/dev/sdc5
/dev/sdc6
/dev/sdc7
/dev/sdc8
/dev/sdd
/dev/sdd1
/dev/sdd2
/dev/sdd3
/dev/sdd4
/dev/sdd5
/dev/sdd6
/dev/sdd7
/dev/sdd8
/dev/fd0
/dev/fd1
/dev/scd0
/etc/fstab
END

	mkdir -p $disk/etc/terminfo/l $disk/lib
	( cd $disk/lib; ln -s . temp )
	cp -v /usr/share/terminfo/l/linux  $disk/etc/terminfo/l

	(
	( (
	#    if test -f STATUS/out/gnu:libc ; then
	#      cat STATUS/out/gnu:libc
	#    else
		cat <<END
$lib/libc-$LIBC.so
$lib/ld-$LIBC.so
$lib/libc.so.6
$lib/ld-linux.so.2
$lib/libdl-$LIBC.so
$lib/libdl.so.2
/lib/libtermcap.so.2
/lib/libtermcap.so.2.0.8
END
#/lib/libreadline.so.2
#/lib/libncurses.so.1.9.9e
#/lib/libncurses.so.3.0
#    fi
#    cat STATUS/out/gnu:readline
#    cat STATUS/out/lib:ncurses
#    cat STATUS/out/lib:shadow
	) # | grep ^$lib/ ;
		cat <<END
/bin/sh
END
			) | 
		while read a ; do
			if test -L $a ; then
				echo $a
			elif test -f $a ; then
				#cp -a $a $disk/$a
				b=/tmp/$$.$(basename $a)
				cp -a $a $b
				#ls -l $b >&2
				strip --strip-debug $b || true
				ls -l $b >&2
				cp -a $b $disk/$a
				rm $b
			else
				echo $a
			fi
			
		done
	#   grep ^/bin/ < STATUS/out/gnu:bash

	) | cpio -pvdL $disk

	cat <<END > $disk/etc/ld.so.conf
/lib
/usr/lib
/cd/lib
/cd/usr/lib
/cd/usr/X11R6/lib
/mnt/lib
/mnt/usr/lib
END

	mkdir $disk/modules

	if test -n "$pcmcia" ; then ## pcmcia
		echo "*.*				/dev/tty1" >$disk/etc/syslog.conf
		mkdir -p $disk/var/log $disk/var/run
		ln -s modules-pcmcia $disk/lib/modules
		( echo /usr/sbin/syslogd
		fgrep -v usr/man /usr/src/STATUS/out/kernel:pcmcia
		) | while read a ; do
		if test -L $a ; then
			mkdir -p $(dirname $disk/$a)
			cp -a $a $disk/$a
		elif test -f $a ; then
			b=/tmp/$$.$(basename $a)
			cp -a $a $b
			#ls -l $b
			strip --strip-debug $b || true
			ls -l $b
			mkdir -p $(dirname $disk/$a)
			cp -a $b $disk/$a
			rm $b
		elif test -d $a ; then
			mkdir -p $disk/$a
		else
			mkdir -p $(dirname $disk/$a)
			cp -a $b $disk/$a
		fi
		done
	fi

	if test -n "$net" ; then ## Netz
		while read a ; do
			if test -f /lib/modules$sys/$ver/$a ; then
				b=/tmp/$$.$(basename $a)
				cp -a /lib/modules$sys/$ver/$a $b
				#ls -l $b >&2
				strip --strip-debug $b || true
				ls -l $b >&2
				cp -a $b $disk/modules/$(basename $a)
				rm $b
			fi
		done <<END
misc/sunrpc.o
fs/lockd.o
fs/nfs.o
fs/ext2.o
block/floppy.o
net/tulip.o
net/3c59x.o
net/8390.o
net/wd.o
net/ne.o
net/3c509.o
net/rtl8139.o
END
#net/de4x5.o
#net/smc-ultra.o
#net/eepro.o
#net/hp100.o
#net/tlan.o
#net/3c503.o
#net/3c507.o
#net/smc9194.o
#net/depca.o
#net/eexpress.o
#net/ewrk3.o

	else ## kein Netz

#scsi/aha152x.o
		while read a ; do cp -v /lib/modules$sys/$ver/$a $disk/modules || true; done <<END
ide/ide-disk.o
ide/ide-mod.o
ide/ide-probe.o
ide/ide-probe-mod.o
ide/ide-proc.o
block/ide-disk.o
block/ide-mod.o
block/ide-probe.o
block/ide-probe-mod.o
block/ide-proc.o
scsi/aha1542.o
scsi/aic7xxx.o
scsi/scsi_mod.o
scsi/ncr53c8xx.o
scsi/sd_mod.o
scsi/sr_mod.o
fs/ext2.o
fs/isofs.o
fs/binfmt_aout.o
block/floppy.o
END
	fi
#scsi/53c7,8xx.o

	touch $disk/proc/mounts
	ln -s /proc/mounts $disk/var/run/mtab

	echo ">> $disk/linuxrc"
else
	mkdir $disk/bin $disk/dev $disk/modules
	cp -av /bin/ash.static $disk/bin/sh
	cp -av /sbin/insmod.static $disk/bin/insmod
	cpio -pvdL $disk <<END
/dev/null
/dev/console
/dev/fd0
END
	while read a ; do cp -v /lib/modules$sys/$ver/$a $disk/modules || true; done <<END
fs/ext2.o
scsi/scsi_mod.o
scsi/ncr53c8xx.o
scsi/aha1542.o
scsi/aha152x.o
scsi/aic7xxx.o
scsi/53c7,8xx.o
scsi/sd_mod.o
block/floppy.o
ide/ide-mod.o
ide/ide-probe.o
ide/ide-probe-mod.o
ide/ide-disk.o
block/ide-mod.o
block/ide-probe.o
block/ide-probe-mod.o
block/ide-disk.o
END
fi
cat <<END >$disk/linuxrc
#!/bin/sh

# set -xv
PATH=/bin:/sbin
END

#echo 'echo "linuxrc startet."' >>$disk/linuxrc

if test -n "$serial" ; then
   echo "exec </dev/ttyS$serial >/dev/ttyS$serial 2>&1" >>$disk/linuxrc
#else
#   echo "exec </dev/tty1 >/dev/tty1 2>&1" >>$disk/linuxrc
fi

cat <<END >>$disk/linuxrc
echo "Dies ist die Bootdiskette für $sys..."

END

if test -n "$net" ; then
	cp /usr/src/STATUS/bin/doinstall.1 $disk/bin/install
	cat <<END >>$disk/MODULE
sunrpc.o
lockd.o
nfs.o
ext2.o
floppy.o
8390.o
END

else ## kein Netz

	cat <<END >>$disk/MODULE
binfmt_aout.o
ext2.o
scsi_mod.o
ncr53c8xx.o
aha1542.o
aha152x.o
aic7xxx.o
53c7,8xx.o
sd_mod.o
floppy.o
ide-mod.o
ide-probe.o
ide-probe-mod.o
ide-disk.o
END
fi

cat <<END >>$disk/linuxrc
while read a ; do
	echo -n "\$a: ";
	if insmod -k /modules/\$a ; then echo "OK"; else echo "nicht geladen"; fi
## >/dev/null 2>&1
done < MODULE

END
if test -z "$static" ; then
	cat <<END >>$disk/linuxrc

echo -n mount /proc
mount -n /proc
echo " ... done"
END
fi

if test -n "$rootdev" -a -n "$static" ; then
	echo "echo $rootdev >/proc/sys/kernel/real-root-dev" >>$disk/linuxrc
else
	echo '# echo 0x801 >/proc/sys/kernel/real-root-dev' >>$disk/linuxrc
fi

if test -z "$run" ; then
	cat <<END >>$disk/linuxrc
/bin/sh -i
END
elif test -n "$net" ; then
	cat <<END >>$disk/linuxrc
/bin/install
END
fi

if test -z "$static" ; then
	cat <<END >>$disk/linuxrc
echo -n umount /proc
umount -n /proc
echo " ... done"
END
fi
cat <<END >>$disk/linuxrc

echo ""
echo "Restarting with hard disk."

END

chmod +x $disk/linuxrc
ls -l $disk/linuxrc


du $disk/.
if test -n "$debug" ; then
	echo "disk ready for compressing."
	( cd $disk; /bin/sh -i )
fi

if test -n "$romfs" -a -z "$static"; then
    echo ldconfig ...
	cp -a /sbin/ldconfig $disk/sbin
    LD_PRELOAD="" chroot $disk /sbin/ldconfig -v
	rm -f $disk/sbin/ldconfig
fi

if test -L $disk/bin/sh ; then
    rm $disk/bin/sh
	cp /bin/sh $disk/bin/sh
fi
if test -n "$prerun" ; then
	echo Starting test shell
	LD_PRELOAD="" chroot $disk /bin/sh 
	echo ...continuing.
else
	LD_PRELOAD="" chroot $disk /bin/sh -c "echo Running a small test..."
fi

if test -z "$dest" ; then
  	if test -n "$fd" ; then
    	dest=/tmp/cdisk.$$
  	else
    	dest=/boot$sys/disk-$net$ver 
  	fi
fi

if test -n "$romfs" ; then
	echo Generating ROM FS
	genromfs -d $disk -f $diskfile -V "Test 1"
else
	echo Unmounting disk file
	umount $disk
	sync
fi

echo "Compressing $diskfile ($disk) to $dest"
gzip < $diskfile > $dest &

if test -n "$fd" ; then

  sleep 1
  if test -b "$fd" ; then
set -x
	if test -n "$format" ; then
#		superformat $fd sect=21 cyl=83
		superformat $fd sect=18 cyl=82
#		superformat $fd sect=18 cyl=80
	else
#		mformat -k -t 83 -s 21 a: # /dev/fd0
		mformat -k -t 82 -s 18 a: # /dev/fd0
#		mformat -k -t 80 -s 18 a: # /dev/fd0
	fi
set +x
    set +e
    /sbin/mkfs.ext2 -m 0 -i 20000 -b 1024 $fd $imgsize
    set -e
    mount -t ext2 $fd $disk
  else
    dd bs=1024 count=$imgsize if=/dev/zero of=$fd
	set +e
    /sbin/mkfs.ext2 -m 0 -i 20000 -b 1024 $fd $imgsize
	set -e
    mount -t ext2 -o loop $fd $disk
  fi
  if test -n "$kiste" ; then
  	if test ! -f STATUS/status/$kiste ; then

	  echo "Keine Statusdatei für $kiste gefunden."
	  echo -n "System (pci): "; read who; if test -z "$who"; then who="pci"; fi
	  echo -n "Ziel (193.141.54.134): "; read slave; if test -z "$slave"; then slave="193.141.54.134"; fi
	  echo -n "Netzbits (26): "; read netbits; if test -z "$netbits"; then netbits=26; fi
	  set -- $(/sbin/ipwhat $slave $netbits)
	  mask=$1
	  netz=$2
	  broad=$3
	  defdef=$4

	  echo -n "Defaultrouter ($defdef): "; read def; if test -z "$def"; then def="$defdef"; fi
	  echo -n "Quelle ($defdef): "; read master; if test -z "$master"; then master="$defdef"; fi
	  echo -n "Hostname (install.noris.de): "; read name; if test -z "$name"; then name="install.noris.de"; fi

	  (
	    echo "### KONFIGDATEN '$kiste'"
	    echo "export who=$who"
	    echo "export master=$master"
	    echo "export slave=$slave"
	    echo "export mask=$mask"
	    echo "export imask=$netbits"
	    echo "export broad=$broad"
	    echo "export netz=$netz"
	    echo "export def=$def"
	    echo "export name=$name"
	  ) > STATUS/status/$kiste

	fi
	cp STATUS/status/$kiste $disk/STATUS
	if test -n "$ver" ; then
	  echo "export kernel=$ver" >>$disk/STATUS
	fi

  fi

  while read a ; do echo /$a; mkdir $disk/$a; done <<END
boot
dev
etc
END

  (
    grep ^/boot/ < STATUS/out/kernel:lilo | fgrep -v .old
    cat <<END
/dev/null
/dev/fd0
/dev/console
END
    if test -n "$root" ; then echo "$root"; fi
    if test -n "$fd" ; then echo "$fd"; fi
  ) | cpio -pvdL $disk

  echo $disk/boot/message
  cat <<END >$disk/boot/message
Dies ist die Bootfloppy fuer $sys, Kernel $ver.

Erstellt via Buildsystem: $(date)

END
  if test -n "$net" ; then
    echo "Konfiguration: NETZ."
  else
    echo "Konfiguration: STANDARD."
  fi >>$disk/boot/message

  echo $disk/etc/lilo.conf
  cat <<END >$disk/etc/lilo.conf
disk=/dev/fd0
	bios=0x00
	sectors=18
	heads=2
	cylinders=82
boot = /dev/fd0
install = /boot/boot.b
compact
delay = 10
read-only
END
	if test -n "$root" ; then
  		cat <<END >>$disk/etc/lilo.conf
root = $root
END
	fi
	if test -n "$serial" ; then
		cat <<END >>$disk/etc/lilo.conf
append="ramdisk=$size $MEM console=$serial,9600 reboot=hard,bios"
serial = 1,9600n8
END
	else
		cat <<END >>$disk/etc/lilo.conf
append="ramdisk=$size $MEM reboot=hard,bios devfs=nomount"
END
	fi
	cat <<END >>$disk/etc/lilo.conf
message = /boot/message
### IMAGES ###
image = 	/boot/linux-$ver
	initrd = /boot/disk-$net$ver
	label = $sver
END

  	rm -r $disk/lost+found
  	ls -l /boot$sys/linux-$ver
  	cp /boot$sys/linux-$ver $disk/boot/linux-$ver
  	wait ## RAM-Disk wird evtl. noch gepackt...
  	ls -l $dest
  	cp $dest $disk/boot/disk-$net$ver 
  	echo Running LILO...
  	if lilo -r $disk ; then : ; else 
     	umount $disk
	 	exit 1
  	fi

  	echo Unmount real disk
  	umount $disk

else # keine Bootfloppy

  	echo Compressing the boot disk...
  	wait

fi


if test -n "$lilo" ; then
  	if test ! -f /boot/message ; then
    	cat <<END
Dies ist die Bootplatte für $sys, Kernel $ver.

Erstellt via Buildsystem: $(date)
Die nd-*-Kernels booten ohne initrd.

END
  	fi
  	if test -z "$net" -a /boot/disk-$ver -ef /boot$sys/disk-$ver ; then
    	echo " *** LILO kann ich hier nicht für $sys starten -- lebensmüde??? *** "
  	else
    	/sbin/mklilo
  	fi
fi

if test -n "$fd" ; then
  	rm $dest
fi
rm $diskfile
rm -r $disk
