#!/usr/bin/python3

import os
import click
import toml
from moat.util import yprint, attrdict, to_attrdict
from pathlib import Path
from dparse.parser import RequirementsTXTLineParser as Parser
from dparse.dependencies import Dependency
import git
import datetime

def dep_str(dep, prefix="python3-"):
    if not isinstance(dep, Dependency):
        dep = Parser.parse(dep)
    r = f"\n  {prefix}{dep.name.replace('.','-').lower()}"
    if dep.specs:
        rr = ""
        for spec in dep.specs:
            op = spec.operator
            if op in {'<', '>'}:
                op += op
            rr += r+f" ({op} {spec.version}),"
        return rr

    else:
        return r+","

@click.command()
@click.option("--no-deb",is_flag=True,help="use the current branch")
@click.option("-o","--overwrite",is_flag=True,help="ignore files in existing debian/ subdir")
def main(no_deb, overwrite):
    """
    Create a Debian subdirectory for a Python module described via
    a 'pyproject.toml' file.
    """
    repo=git.Repo(".")
    if not no_deb and repo.active_branch.name not in {"deb", "debian"}:
        print("Creating 'deb' branch")
        repo.git.checkout("HEAD", b="deb")
    tag=repo.git.describe(tags=True)
    i = tag.find("-")
    if i > -1:
        tag = tag[:i]
        print("Warning: not a pristine tagged version! Using", tag)
    now = datetime.datetime.now().astimezone().strftime("%a, %d %b %Y %T %z")

    try:
        with open("pyproject.toml","r") as tf:
            d = to_attrdict(toml.load(tf))
    except FileNotFoundError:
        raise UsageError("This is not a Python module, or it doesn't have a 'pyproject.toml' file.")
    # yprint(d)
    name = d.project.name
    named = name.replace(".","-").lower()

    try:
        maint = d.project.maintainers
    except AttributeError:
        maint = None
    if not maint:
        maint = [attrdict(name=os.environ["DEBFULLNAME"],email=os.environ["DEBEMAIL"])]

    depends = "".join(dep_str(x) for x in d.project["dependencies"])
    try:
        dev_depends = d.project["optional-dependencies"]["dev"]
    except KeyError:
        dev_depends = ""
    else:
        dev_depends = "".join(dep_str(x) for x in dev_depends)

    build_depends = ""
    try:
        deps = d["build-system"].requires
    except KeyError:
        pass
    else:
        for dep in deps:
            dep = Parser.parse(dep)
            if dep.name == "flit_core":
                dep.name = "flit"
                build_depends += dep_str(dep, prefix="")
                build_depends += dep_str("flit-scm")
                continue
            elif dep.name == "setuptools-git-versioning":
                dep.name = "setuptools-scm"
            build_depends += dep_str(dep)

    deb=Path("debian")
    if deb.exists():
        if not overwrite:
            raise click.UsageError("'debian' subdirectory already exists. Exiting.")
    else:
        deb.mkdir()

    # TODO process .md and .rst files?
    readme = ""
    with open(d.project.readme,"r") as rm:
        for n,l in enumerate(rm):
            readme += f"  {l.rstrip() or '.'}\n"
            if n>5 and not l.strip():
                break
    with open(deb/"rules","w") as f:
        f.write(f"""\
#!/usr/bin/make -f

# This file was automatically generated by toml2deb
# Thu, 16 Jul 2020 13:15:17 +0200
export PYBUILD_NAME={named}
%:
	dh $@ --with python3 --buildsystem=pybuild
""")

    with open(deb/"compat","w") as f:
        f.write(f"""\
13
""")

    with open(deb/"control","w") as f:
        f.write(f"""\
Source: {named}
Maintainer: {maint[0].name} {maint[0].email}
Section: python
Priority: optional
Build-Depends: dh-python, python3-setuptools, python3-all, debhelper (>= 13),{dev_depends}{build_depends}
Standards-Version: 3.9.6
Homepage: {d.project.urls.homepage}

Package: python3-{named}
Architecture: all
Depends: ${{misc:Depends}}, ${{python3:Depends}},{depends}
Description: {d.project.description}
{readme}
""")

    with open(deb/"changelog","w") as f:
        f.write(f"""\
{named} ({tag}-1) unstable; urgency=medium

  * Initial Debianization.

 -- {maint[0].name} <{maint[0].email}>  {now}
""")

    with open(deb/".gitignore","w") as f:
        f.write(f"""\
/files
/*.log
/*.debhelper
/*.debhelper-build-stamp
/*.substvars
/debhelper-build-stamp
/python3-{named}
""")

if __name__ == "__main__":
    main()

