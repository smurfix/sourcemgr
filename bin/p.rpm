#!/bin/bash
 
if rpm -q rpm | grep -q noris ; then : ; else
	echo >&2 "Zum RPM-Bauen braucht es das noris-RPM-Paket. Sorry."
	exit 1
fi

set -e
trap 'test -n "$superset" && kill $SUPERPID; usage; exit 1' 0

RPM="-v --rcfile /usr/src/STATUS/rpmrc"

usage() {
cat >&2 <<END
Usage: $(basename $0)  -- Hole aus Archiv, baue, installiere, wirf weg.
       [ -i (install) ]  [ -I (build-und-install) ]
       [ -v release ] [ -w norisrelease ]
       [ -s Subtarget, d.h. compile_XX ] 
       [ -n (Sourcen nach Installation nicht löschen) ]
       [ -N (laß in Ruhe wenn bereits fertig) ]
       [ -D (noDeps, ignoriere Abhängigkeiten) ]
       [ -a (do it again from checked-out sources) ]
       [ -q PACKAGE (rpm-query PACKAGE for the file list) ]
       [ was ]
rpm.spec   komplette .spec-Datei
         ansonsten:
rpm.pre .preun .post .postun .check .verify
           Standard-Skripts
rpm.tags   Tags für den Standardheader, interpretiert
rpm.sub    Zusatz für die .spec, nicht interpretiert
END
    trap "" 0
    exit 1
}

dir=
defvers=noris
vers=
doinstall=
islocal=
nodelete=
compile=compile
install=install
submode=
recargs=
skipdone=
freinst=
defbase=base
again=
qpack=

   eval set -- "$(getopt "v:w:hind:s:INfaD" "$@")"
   if test $? != 0
   then
	   exit 1
   fi
   for i
   do
	   case "$i"
	   in
		   -h)
		       exit 1 ;;
		   -d)
			   shift; recargs="$recargs -d $1"; dir="$1"; shift;;
		   -v)
			   shift; recargs="$recargs -V $1"; basev="$1"; shift;;
		   -w)
			   shift; recargs="$recargs -v $1"; vers="$1"; shift;;
		   -s)
			   shift; recargs="$recargs -s $1"; submode="_$1";
			                                    subtarget="-$1"; shift;;
			-f)
				shift; recargs="$recargs -f"; freinst=y ;;
			-n)
				shift; recargs="$recargs -n"; nodelete=y ;;
			-D)
				shift; recargs="$recargs -N"; RPM="$RPM --nodeps" ;;
			-N)
				shift; recargs="$recargs -N"; skipdone=y ;;
			-a)
				shift; recargs="$recargs -a"; again=y ;;
			-q)
				shift; recargs="$recargs -$q $1"; qpack=$1 ; shift;;
			-i)
				shift; recargs="$recargs -i"; doinstall=y ;;
			-I)
				shift; doinstall=b ;;
			--)
				shift; break;;
	   esac
   done

if test -n "$basev" -a -z "$vers"; then
	vers=$basev
	basev=$defbase
else
	test -n "$vers" || vers=$defvers
	test -n "$basev" || basev=$defbase
fi

case $vers in
   *.*) ;;
   *)   vers=$vers.@ ;;
esac

case $basev in
   *.*) ;;
   *)   basev=$basev.@ ;;
esac

superset=
#if test -n "$doinstall" -a -z "$SUPERPID"; then
#	sudo echo "sudo-Test OK"
#	(
#	    TTY=$(tty)
#		while true ; do sudo touch /var/run/sudo/$USER.$TTY; done
#	) &
#	export SUPERPID=$!
#	superset=y
#fi

dir="$(p.name "$dir")"
if test -z "$dir" ; then
	dir="$(p.name -n "$*")" ;
    if test -f "/usr/src/STATUS/packages/$dir" ; then
		trap 'test -n "$superset" && kill $SUPERPID' 0
		if test "$doinstall" = "b" ; then recargs="$recargs -I"; fi
		while read x y ; do
			if test -n "$y" ; then y="-s $y"; fi
			echo + p.make $recargs $y $x
			p.make -N $recargs $y $x
		done < /usr/src/STATUS/packages/$dir
	    exit 0
    fi
    if test -f "/usr/src/STATUS/hosts/$dir" ; then
		trap 'test -n "$superset" && kill $SUPERPID' 0
		if test "$doinstall" = "b" ; then recargs="$recargs -I"; fi
		while read x y ; do
			if test -n "$y" ; then y="-s $y"; fi
			echo + p.make $recargs $y $x
			p.make -N $recargs $y $x
		done < /usr/src/STATUS/hosts/$dir
	    exit 0
    fi
	recargs="$recargs $*"
else
	test -z "$*"
fi

export PRCS_REPOSITORY=/usr/src/archiv/prcs PRCS_LOGQUERY=1
what=$(echo $dir | sed -e 's/:/_/g'  -e 's/\//_/g' -e 's/_*$//')
desc=$(echo $dir | sed -e 's/_/:/g'  -e 's/\//:/g' -e 's/:*$//')
#dir=$(echo $desc | sed -e 's/:/\//g')

trap 'test -n "$superset" && kill $SUPERPID' 0

if test -z "$doinstall" -a "$(whoami)" = "root" ; then
    echo "Bitte NICHT als Root!"
    exit 1
fi

set -e

cd /usr/src
if test -n "$skipdone" -a -s "STATUS/done/$desc$submode" ; then
	echo "$desc$submode: Done."
	exit 0
fi
if test -n "$doinstall" -a -s "STATUS/done/$desc$submode" ; then
	echo "$desc$submode: Bereits installiert, wiederhole..."
	mv "STATUS/done/$desc$submode" "STATUS/to-install/$desc$submode"
fi
if test -n "$doinstall" -a -s "STATUS/fail/$desc$submode" -a -n "$freinst"; then
	echo "$desc$submode: Installationsfehler? wiederhole..."
	mv "STATUS/fail/$desc$submode" "STATUS/to-install/$desc$submode"
fi
if test "$doinstall" = "y" -a ! -f "STATUS/to-install/$desc$submode" ; then
	echo "$desc$submode: Noch nicht gebaut!"
	exit 1
fi
if test -f "/usr/src/STATUS/checkout/$desc" ; then
	# set -- $(grep "^$desc[	 ]" STATUS/checkout/$desc)
	set -- $(cat /usr/src/STATUS/checkout/$desc)
	what=$1
	compile=$2
	install=$3
	what=$(echo $what | sed -e 's/:/_/g'  -e 's/\//_/g' -e 's/_*$//')
	if test -n "$4" ; then
		defvers="$4"
	fi
fi
if test ! -d $PRCS_REPOSITORY/$what ; then
	echo "$desc$submode: kein PRCS-Archiv gefunden!"
	exit 1
fi
if test -f "STATUS/work/$desc$submode" ; then
	read host pid < STATUS/work/$desc$submode
	if ! test "$host" = "$(hostname)" || kill -0 $pid >/dev/null 2>&1 ; then
		echo -n "$desc$submode: In Arbeit: "
		head -1 STATUS/work/$desc$submode 
		echo "$desc$submode: 'redo $dir', wenn Abbruch."
		exit 1
	fi
fi
if test -f "STATUS/legacy/$desc" ; then
	echo "$desc$submode: Altes Programm, wird nicht angefaßt."
	exit 1
fi
#	if test -f "STATUS/to-install/$desc$submode" -a -z "$doinstall" ; then
#		echo "$desc$submode: Muß installiert werden."
#		exit 0
#	fi
if test -f STATUS/work/$desc$submode ; then
	mv -f STATUS/work/$desc$submode STATUS/work/$desc$submode.new
fi
echo $(hostname) $$ > STATUS/work/$desc$submode

if test -s "STATUS/fail/$desc$submode" ; then
	echo '# RESTART (fail)'
	echo '# RESTART (fail)' >> STATUS/work/$desc$submode
	sed -e '/^#-#/d' -e 's/^/#-/' < STATUS/fail/$desc$submode >> STATUS/work/$desc$submode 
	echo '# RESTART (fail)' $(hostname) $$ >> STATUS/work/$desc$submode
	rm -f STATUS/fail/$desc$submode
fi
if test -s "STATUS/to-install/$desc$submode" ; then
	echo '# RESTART (to-install)'
	echo '# RESTART (to-install)' >> STATUS/work/$desc$submode
	sed -e '/^#-#/d' -e 's/^/#-/' < STATUS/to-install/$desc$submode >> STATUS/work/$desc$submode 
	echo '# RESTART (to-install)' $(hostname) $$ >> STATUS/work/$desc$submode
	rm -f STATUS/to-install/$desc$submode
fi
if test -s "STATUS/done/$desc$submode" ; then
	echo '# RESTART (done)'
	echo '# RESTART (done)' >> STATUS/work/$desc$submode
	sed -e '/^#-#/d' -e 's/^/#-/' < STATUS/done/$desc$submode >> STATUS/work/$desc$submode 
	echo '# RESTART (done)' $(hostname) $$ >> STATUS/work/$desc$submode
	rm -f STATUS/done/$desc$submode
fi
if test -s STATUS/work/$desc$submode.new ; then
	echo '# RESTART (Abbruch)'
	echo '# RESTART (Abbruch)' >> STATUS/work/$desc$submode
	sed -e '/^#-#/d' -e 's/^/#-/' < STATUS/work/$desc$submode.new >> STATUS/work/$desc$submode 
	echo '# RESTART (Abbruch)' $(hostname) $$ >> STATUS/work/$desc$submode
	rm -f STATUS/work/$desc$submode.new
fi

test -n "$vers" || vers=$defvers

if test -z "$again" -a -z "$qpack" ; then
	# FR=/usr/src/RPM/BUILD/$(basename $dir)
	FR=/tmp/rpm.$$
	(
		mkdir $FR
		cd $FR
		p.get -f -d $what -v $vers >/dev/null 2>&1 \
			rpm.spec rpm.tags rpm.sub rpm.clean rpm.verify \
			rpm.pre rpm.post rpm.preun rpm.postun \
		|| true
	)

	if test -f $FR/rpm.spec ; then cp $FR/rpm.spec STATUS/rpm/$desc$subtarget.spec; noflist=y; else
		(
			echo "## autogenerated by 'p.rpm -I $what'. Do not edit."
			echo ""
			if test -f $FR/rpm.tags ; then echo "#from PRCS#" ; cat $FR/rpm.tags; echo ""; fi
			echo "#from p.rpm#"

			version="$( (prcs info -f -l -r$basev $what 2>/dev/null || prcs info -f -l -r$vers $what ) | sed -n -e 's/^Version-Log:[^0-9]*//p' | sed -e 's/[-\. ]/./g' )"

			if test -z "$version" ; then version=1; fi

			grep -qs "^Summary:" $FR/rpm.tags || echo "Summary: noris-Paket $what,$( (prcs info -f -l -r$basev $what 2>/dev/null || prcs info -f -l -r$vers $what ) | sed -n -e 's/Project-Description://p' )"
			grep -qs "^Name:" $FR/rpm.tags || echo "Name: $(basename $dir)"
			grep -qs "^Version:" $FR/rpm.tags || echo "Version: $version"
			grep -qs "^Release:" $FR/rpm.tags || ( echo '# $Format: "Release: $ProjectVersion$"$'; echo "Release: $(prcs info -f -r$vers $what | sed -n -e 's/^[^ ]* \([^ ]*\.[0-9][0-9]*\).*/\1/p')" )

			grep -qs "^Group:" $FR/rpm.tags || echo "Group: noris"
			grep -qs "^Source:" $FR/rpm.tags || echo '# $Format: "Source: PRCS::$Project$::$ProjectVersion$"$'; echo "Source: PRCS::$what::$vers"

			grep -qs "^Vendor:" $FR/rpm.tags || echo "Vendor: noris network AG"
			grep -qs "^Prefix:" $FR/rpm.tags || echo "Prefix: /usr"

			cat <<END

%description
END
			if test -f $FR/rpm.descr ; then cat $FR/rpm.descr; echo ""; fi
			
			if prcs info -f -r $basev $what >/dev/null ; then
			echo " Original: Version $basev"
			prcs info -f -l -r $basev $what | sed -e 's/^/ /'
			echo ""
			fi
			echo " Noris: Version $vers"
			prcs info -f -l -r $vers $what | sed -e 's/^/ /'
			echo ""

			if test -f $FR/rpm.sub ; then echo "#from rpm.sub#"; cat $FR/rpm.sub; echo ""; fi

			FM='# $Format: "p.get -d $Project$ -v $ProjectVersion$"$'

%prep
%setup -T -c
$FM
p.get -f -d $what -v $vers

%build
make -f Makefile.Linux $compile$subtarget

%install
make -f Makefile.Linux $install$subtarget

END
			if test -f $FR/rpm.pre ; then echo "%pre"; cat $FR/rpm.pre; echo ""; fi
			if test -f $FR/rpm.post ; then echo "%post"; cat $FR/rpm.post; echo ""; fi
			if test -f $FR/rpm.preun ; then echo "%preun"; cat $FR/rpm.preun; echo ""; fi
			if test -f $FR/rpm.postun ; then echo "%postun"; cat $FR/rpm.postun; echo ""; fi
			if test -f $FR/rpm.verify ; then echo "%verifyscript"; cat $FR/rpm.verify; echo ""; fi
			if test -f $FR/rpm.clean ; then echo "%clean"; cat $FR/rpm.clean; echo ""; fi
			
			cat <<END

%files
%docdir /usr/info
%docdir /usr/doc
%docdir /usr/man
%docdir /usr/share/info
%docdir /usr/share/doc
%docdir /usr/share/man

END
		) >STATUS/rpm/$desc$subtarget.spec
	fi
	rm -rf $FR
fi

## wenn nur -a, baue nur das Archiv nochmal
if test -z "$again" -o -n "$doinstall" ; then
mkfifo /tmp/ff.$$
mkfifo /tmp/fg.$$
( set +x; while read a ; do echo "# $a" ; done < /tmp/ff.$$ | tee -a STATUS/work/$desc$submode ) &
reader=$!
( set +x; while read a ; do echo "# $a" ; done < /tmp/fg.$$ | tee -a STATUS/work/$desc$submode.e ) &
readere=$!
sleep 1
exec  5>&1 6>&2  >/tmp/ff.$$ 2>/tmp/fg.$$
rm /tmp/ff.$$ /tmp/fg.$$

if test -z "$doinstall" -o "$doinstall" = "b" -a -z "$noflist" ; then # compile
	#env LANG=C-JIS make -f $MF $compile$subtarget || bad=y
	NRPM="$RPM"
	if test -n "$again" ; then NRPM="$NRPM --short-circuit"; fi
	echo rpm -bc $NRPM STATUS/rpm/$desc$subtarget.spec
	sudo rpm -bc $NRPM STATUS/rpm/$desc$subtarget.spec || bad=$!
fi

if test -n "$doinstall" -a -z "$bad" -a -z "$noflist" ; then
	echo "+*+" rpm -bi --short-circuit $RPM STATUS/rpm/$desc$subtarget.spec
	echo "+*+" LD_PRELOAD=/usr/lib/log-install.so LOGFILE=/usr/src/STATUS/work/$desc$submode.p
	sudo env LD_PRELOAD=/usr/lib/log-install.so LOGFILE=/usr/src/STATUS/work/$desc$submode.p \
	rpm -bi --short-circuit $RPM STATUS/rpm/$desc$subtarget.spec || bad=$!
fi

cd /usr/src
exec  1>&5 2>&6
sleep 1
kill $reader 2>/dev/null || true
kill $readere 2>/dev/null || true
test ! -f /usr/src/STATUS/work/$desc$submode.p || cat /usr/src/STATUS/work/$desc$submode.p >> /usr/src/STATUS/work/$desc$submode && rm -f /usr/src/STATUS/work/$desc$submode.p
test ! -f /usr/src/STATUS/work/$desc$submode.e || cat /usr/src/STATUS/work/$desc$submode.e >> /usr/src/STATUS/work/$desc$submode && rm -f /usr/src/STATUS/work/$desc$submode.e
if test -n "$bad" ; then
	mv "STATUS/work/$desc$submode" "STATUS/fail/$desc$submode"
	if test -n "$doinstall" ; then touch "STATUS/done/$desc$submode"; fi
	echo "$desc$submode: ### FEHLER ###"
	exit $bad
fi
fi

if test -z "$doinstall" -a -z "$again"; then # nocompile
	mv "STATUS/work/$desc$submode" "STATUS/to-install/$desc$submode"
elif test -n "$again" -o -n "$doinstall" -a -n "$noflist" ; then ## install checked-out
    if test -n "$qpack" -a -z "$noflist" ; then
		sudo rpm -q --queryformat '[%{fileflags} %{filenames}\n]' $qpack | while read a b ; do 
		  if test $a = 0 ; then echo "$b"
		  elif test $a = 1 ; then echo "%config(noreplace) $b"
		  elif test $a = 2 ; then echo "%doc $b"
		  else echo "$b"
		  fi
		done >> STATUS/rpm/$desc$subtarget.spec
	fi
	sudo rpm -bb --clean $RPM STATUS/rpm/$desc$subtarget.spec
else # install
	mv -f "STATUS/work/$desc$submode" "STATUS/done/$desc$submode"
	echo "$desc$submode: Generiere STATUS/dist/$desc$submode"
	rm -f "STATUS/fail/$desc$submode"
	test -n "$noflist" || sudo gen.flist.rpm < STATUS/done/$desc$submode >> STATUS/rpm/$desc$subtarget.spec

	sudo gen.flist < STATUS/done/$desc$submode > STATUS/out/new.$desc$submode 

	comm -23 <( ( test ! -f STATUS/removed/$desc$submode || cat STATUS/removed/$desc$submode ; test ! -f STATUS/out/$desc$submode || cat STATUS/out/$desc$submode ) | sort -u) <(sort -u STATUS/out/new.$desc$submode) > STATUS/removed/new.$desc$submode
	mv -f STATUS/out/new.$desc$submode STATUS/out/$desc$submode
	mv STATUS/removed/new.$desc$submode STATUS/removed/$desc$submode 

	sudo rpm -bb --short-circuit --clean $RPM STATUS/rpm/$desc$subtarget.spec
fi

exit 0
