#!/bin/bash
. /usr/share/sourcemgr/repository
. /usr/share/sourcemgr/debian
. /usr/share/sourcemgr/upload_to

usage() {
cat >&2 <<END
Usage: $(basename $0)  -- Build Debian source(+binary) packages.
    [ -b (build a binary) | -B (build with pbuilder) 
        [ -i (install the binaries afterwards) ] ]
    [ -s? (passed to dpkg-*) ]  [ -k (keep temporary directory) ]
    [ -n (ignore lintan errors) ]  [ -S (don't sign the result) ]
    [ -V VERS -- include changelog since VERS ]
    [ -w http://where/ever/ -- Debian repo with .orig.tar.gz file ]
    [ -t HOST (upload to here: first arg to 'dput') ]
    [ -l (don't push/pull) ] [ -d package ]  [ -v branch ]
    [ -T dir (save stuff here; default: parent directory if '-l' was given) ]
	[ prefix_to_process ]

This program prepares a Debian source package and pushes it to a
repository. It can also build binary archives.

Note that source+binary .changes files are not auto-combined before
uploading. Use "combine_changes" and upload manually if you're uploading
to a place (like the main Debian repository...) which can't handle that.

It makes sense to have gpg and/or ssh agents running so that you don't
have to enter various passphrases multiple times (or at all).

$(basename $0) defaults to using the current repository, but you can
also tell it to 

END
    trap "" 0
    exit 1
}

set -e

for f in gpg ssh ; do
	if type -p $f-agent-start.sh >/dev/null 2>&1 ; then
		. $(type -p $f-agent-start.sh)
	fi
done
trap 'usage; exit 1' 0

dir=
defvers=- # cannot be empty
vers=
dest=
destdir=
inst=
bin=
pbin=
opt_s=
keep=
lwarn=
nosign=
opt_v=
local=

eval set -- "$(getopt "bBd:iklns:St:T:v:V:w:W:h" "$@")"
if test $? != 0
then
	exit 1
fi
for i
do
	case "$i"
	in
		-h)
			exit 1 ;;
		-n)
			shift; lwarn=y ;;
		-l)
			shift; local=y; UPLOAD_TO=""; ddestdir="$(pwd)/.." ;;
		-i)
			shift; inst=y ;;
		-b)
			shift; bin=y ;;
		-k)
			shift; keep=y ;;
		-B)
			shift; pbin=y ;;
		-S)
			shift; nosign=y ;;
		-t)
			shift; dest="$1"; shift;;
		-T)
			shift; destdir="$1"; shift;;
		-V)
			shift; opt_v="-v$1"; shift;;
		-w)
			shift; DEBIAN_REPOSITORY="$1"; shift;;
		-s)
			shift; opt_s="-s$1"; shift;;
		-d)
			shift; dir="$1"; shift;;
		-v)
			shift; vset=1; basev="$1"; shift;;
		--)
			shift; break;;
	esac
done

if test -n "$1" ; then
	predir=/$1
	prefix=$(echo $1 | sed -e 's,/,_,g')_
else
	predir=""
	prefix=""
fi

if test -n "$inst" -a -z "$bin$pbin" ; then
	usage
fi

if test -n "$local" -a -n "$dir$vers" ; then
	usage
fi

if test -z "$local" ; then
	if test -n "$basev" -a -z "$vers"; then
		vers=$basev
		basev=$defbase
	else
		test -n "$vers" || vers=$defvers
		test -n "$basev" || basev=$defbase
	fi
fi

test -n "$dest" || dest="$UPLOAD_TO"
test -n "$destdir" || destdir="$ddestdir"

if { test -d Bitkeeper && test $(bk sfiles -xgc | fgrep -v '/SCCS/' | wc -l) -gt 0 ; } \
		|| { test -d .git && test $(git-ls-files --others --exclude-per-directory=.gitignore | wc -l) -gt 0 ; } ; then
	trap "" 0
	echo "There are unsaved files." >&2
	echo "Please fix this before proceeding." >&2
	exit 1
fi
if test -d BitKeeper; then
	test -n "$local" || bk pull
	if test -d RESYNC ; then
		echo "There's a RESYNC directory, i.e. unmerged changes." >&2
		echo "Please fix this before proceeding." >&2
		exit 1
	fi
	if test -z "$local" ; then
		echo -n "Pushing local version to "; bk parent -p
		bk push -q
	fi
elif test -d .git ; then
	: # nothing to do
else
	echo "Could find neither git nor bitkeeper!" >&2
	exit 1
fi

trap '' 0

for f in debian/control debian/changelog ; do
	if ! test -w $f && { ! test -d BitKeeper || ! bk get -q debian/control ; } && ! test -d .git ; then
		echo "Could not check out '$f'." >&2
		exit 1
	fi
done
VT="$(cd .$predir && dpkg-parsechangelog | sed -ne 's/^Version:[ 	]*//p')"
V="$(echo $VT | sed -e 's/~/--/g')"
VE="$(cd .$predir && dpkg-parsechangelog | sed -ne 's/^Version:[ 	]*\(.*\)-.*/\1/p' | sed -e 's/~/--/g')"
DI="$(cd .$predir && dpkg-parsechangelog | sed -ne 's/^Distribution:[ 	]*//p')"

N="$(sed -n -e 's/^Source: //p' .$predir/debian/control | head -1)"
test -n "$N" || N="$(basename "$dir")"
N1=$(echo $N | perl -pe 's/^((lib)?.).*/$1/')

test -n "$V"
if test -d BitKeeper ; then
	if bk prs -r+ -ahnd'$if(:TAG:){$each(:TAG:){:TAG:}}' ChangeSet | fgrep -xqs "${prefix}DEBIAN-$V"
	then : ; else
		bk tag -r+ ${prefix}DEBIAN-$V
		test -n "$local" || bk push -q
	fi
fi
if test -d .git ; then
	if "$(git-rev-parse HEAD)" = "$(git-rev-parse refs/tags/${prefix}DEBIAN-$V)"
	then : ; else
		git tag -f ${prefix}DEBIAN-$V HEAD
	fi
fi

# Now build the source archives
T="/var/tmp/ex.$$"
if test -z "$keep" ; then
	trap 'rm -rf $T' 0 1 2 15
else
	trap 'echo DIR $T' 0 1 2 15
fi

if test -n "$VE" ; then
	if test -d BitKeeper; then
		E="$(bk prs -r${prefix}EXTERN-$VE -h -d:SHORTKEY: ChangeSet)"
		test -n "$E" || \
		E="$(bk prs -r${prefix}EXTERN -h -d:SHORTKEY: ChangeSet)"
	fi
	if test -d .git; then
		E="${prefix}EXTERN-$VE"
		if test ! -s .git/refs/tags/$E ; then
			if test -s .git/refs/heads/extern ; then
				cat .git/refs/heads/extern > .git/refs/tags/$E
			else
				test -s .git/refs/heads/upstream
				cat .git/refs/heads/upstream > .git/refs/tags/$E
			fi
		fi
	fi
fi

A="$(dpkg-architecture -qDEB_BUILD_ARCH)"
if test -n "$VE" ; then
	if test -z "$E" ; then
		echo "non-native version, but no ${prefix}EXTERN tag set!" >&2
		exit 1
	fi
else
	E="" # must be local, despite the existence of an ${prefix}EXTERN tag
fi

b.uplog

DV="$VT"
VT="$(echo $DV | sed -ne 's/\(..*\)-..*/\1/p' )"
if test -z "$VT" ; then E=""; VT="$DV"; fi
VV="$(echo "$VT" | sed -e 's/^[0-9][0-9]*://')"

DV="$(echo "$DV" | sed -e 's/^[0-9][0-9]*://')"

rm -f BitKeeper/etc/SCCS/x.id_cache
if test -d BitKeeper ; then
	bk export -T -w -tplain -r+ . "$T/$N-$VV.x"
fi
if test -d .git ; then
	git-checkout-index --prefix="$T/$N-$VV.x/" -a
fi
mv "$T/$N-$VV.x$predir" "$T/$N-$VV"

# If there's a "debian/exporter" script, run it.
if test -x "$T/$N-$VV"/debian/exporter ; then
	"$T/$N-$VV"/debian/exporter "$T/$N-$VV" "+"
fi

test -f "$T/$N-$VV"/debian/changelog || mv debian/changelog "$T/$N-$VV"/debian

if test -n "$E" ; then # non-original package
	if \
		cp ../${N}_$VV.orig.tar.gz "$T/" 2>/dev/null ||
		wget -qq -O "$T/${N}_$VV.orig.tar.gz" \
			"${DEBIAN_REPOSITORY}/upstream/${N}_$VV.orig.tar.gz" ||
		wget -qq -O "$T/${N}_$VV.orig.tar.gz" \
			"http://ftp2.de.debian.org/debian/pool/main/${N1}/${N}/${N}_$VV.orig.tar.gz" ||
		false
	then
		echo + get original source from .. or via HTTP
		if test $(tar tfvz "$T/${N}_$VV.orig.tar.gz" | wc -l) -lt 4 ; then
			# Oh no, an embedded tar file. I hate embedded tar files.
			SEPARATE=-ss
			cd "$T"
			mkdir SEP
			cd SEP
			tar xfz "../${N}_$VV.orig.tar.gz"
			if test $(ls | wc -l) -lt 2 ; then
				mv $(ls) XyZ
				mv XyZ/* .
				rm -rf XyZ
			fi
			rm -f *.sig *.sig.asc || true
			for f in *.tar.gz ; do tar xfz "$f"; done
			rm -f *.tar.gz
			if test $(ls | wc -l) -lt 2 ; then
				mv $(ls) XyZ
				mv XyZ/* .
				rm -rf XyZ
			fi
			cd ..

			mv SEP "$T/$N-$VV.orig"
		fi
	else
		echo + create new original source archive
		rm -f "$T/${N}_$VV.orig.tar.gz"
		if test -d BitKeeper ; then
			rm -f BitKeeper/etc/SCCS/x.id_cache
			bk export -T -w -tplain -r$E . "$T/$N-$VV.orig.x"
		fi
		if test -d .git ; then
			env GIT_INDEX_FILE="$T/git-index" git-read-tree $E
			env GIT_INDEX_FILE="$T/git-index" git-checkout-index --prefix="$T/$N-$VV.orig.x/" -a
		fi
		mv "$T/$N-$VV.orig.x$predir" "$T/$N-$VV.orig"
		if test -x "$T/$N-$VV"/debian/exporter ; then
			"$T/$N-$VV"/debian/exporter "$T/$N-$VV.orig" "${prefix}EXTERN"
		fi
	fi
fi

cd "$T/$N-$VV"
rm -f debian/users debian/version debian/changelog.old debian/exporter .gitignore || true

if test -n "$SEPARATE" ; then
  mkdir debian/patches
  fakeroot debian/rules clean
  echo build.patch >>debian/patches/00list
  ( cd ..; diff -ruN -x debian "$N-$VV.orig" "$N-$VV" ) > debian/patches/build.patch
  cat debian/patches/build.patch | ( cd ../"$N-$VV.orig"; patch -p1 -f -E )
  cd ..; dpkg-source $SEPARATE $opt_s -b "$N-$VV" "$N-$VV.orig"
  cd "$N-$VV"
else
  fakeroot dpkg-buildpackage -S $opt_s -uc -us
fi

if test -n "$bin"; then
	dpkg-checkbuilddeps || sudo apt-get build-dep $N || exit 1
	fakeroot dpkg-buildpackage -nc -b -uc -us
fi
test -z "$pbin" || pdebuild --buildresult "$T" -- --debbuildopts "-nc -b"
if test -z "$bin$pbin" ; then
	dpkg-genchanges $opt_v -S $opt_s > "../${N}_${DV}_source.changes"
	cd "$T"
	test -n "$nosign" || debsign "${N}_${DV}_source.changes"
	test -n "$nosign" -o -z "$pbin$bin" || debsign "${N}_${DV}_$A.changes"
else
	dpkg-genchanges $opt_v $opt_s > "../${N}_${DV}.changes"
	cd "$T"
	test -n "$nosign" || debsign "${N}_${DV}.changes"
	test -n "$nosign" -o -z "$pbin$bin" || rm "${N}_${DV}_$A.changes"
fi

echo "Built:"
ls 
echo ""

for f in *.changes; do
	if lintian -viI "$f" || test -n "$lwarn" ; then : ; else
		echo "Error in $f: Aborting.\n"; >&2
		exit 1
	fi
done

for f in *.changes; do
	if linda -vi "$f" || test -n "$lwarn" ; then : ; else
		echo "Error in $f. NOT aborting.\n"; >&2
	fi
done

if test -z "$nosign" ; then
	if test -n "$dest" ; then
		for f in *.changes; do
			dput $dest "$f"
		done
	fi
fi
if test -n "$inst" ; then
	sudo dpkg -i *.deb
fi
if test -n "$destdir" ; then
	for f in * ; do
		test -d "$f" || mv "$f" "$destdir"
	done
fi

#dpkg-buildpackage -S -rfakeroot -IPENDING -Idebian/users -Idebian/version -IBitkeeper -ISCCS "$@"


