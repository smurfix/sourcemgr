#!/usr/bin/perl

use File::Basename;

my $dir = '?';
my @prefs;

sub dodir(\$) {
	my($f) = $_[0];

	$$f = cleanup($$f);
	$$f =~ s/^/$dir\// if $$f !~ /^\//;
	# $$f .= "/." if -d "$$f/.";
}

sub cleanup($) {
	my $f = $_[0];
	$f =~ s#//+#/#g;
	1 while $f =~ s#/+\./+#/#;
	1 while $f =~ s#/+\.*$##;
	1 while $f =~ s#/[^/]+/\..(/|$)#$1#;
	$f;
}

%files=();
nf: while(<>) {
	chop;
	last if /\*CUTOFF\*/;
	s/^# CHECKDIR /DIR /;
	s/^# EQUALCP /LNK /;
	s/^# STATIN /STI /;
	next if /^#/;
	1 while s/\/\//\//;
	1 while s/\/\.\//\//;
	# 1 while s/\/[^/]+\/\..\//\//;
	($key,$val,$val2) = split(/\s/,$_,3);
	if($key =~ /^\// and $val eq "") {
		$val = $key;
		$key = "NEW";
	}
	if($key eq "STI") {
		push(@prefs,$val);
		next;
	}
	if($key eq "CWD") {
		$dir = $val;
		next;
	}
	if($key eq "OLD") {
		$files{cleanup($val)}++;
		next;
	}
	if($key eq "STN" or $key eq "STL" or $key eq "ACC") {
		dodir($val);
		foreach my $pref(@prefs) {
			next if index($val,$prefs) != 0;
			$files{cleanup($val)}++;
			next nf;
		}
		next;
	}
	if($key eq "NEW" or $key eq "NW?" or $key eq "DIR") {
		dodir($val);
		$files{cleanup($val)}++;
		next;
	}
	if($key eq "LNK") {
		if($val2 eq "") {
			dodir($val);
			$files{cleanup($val)}++;
		} else {
			dodir($val2);
			$files{cleanup($val2)}++;
		}
		next;
	}
	if($key eq "SLN") {
		dodir($val2);
#		if($val !~ /^\//) {
#			$valn = $val2; $valn =~ s/[^\/]+$//;
#			$val = $valn.$val;
#		}
#		$files{cleanup($val)}++;
		$files{cleanup($val2)}++; ## just in case...
		next;
	}
	if($key eq "REN") {
		dodir($val2);
		if($val !~ /^\//) {
			$valn = $val; $valn =~ s/[^\/]+$//;
			$val2 = $valn.$val2;
		}
		$files{cleanup($val2)}++;
		delete $files{cleanup($val)};
		next;
	}
	if($key eq "DEL") {
		dodir($val);
		delete $files{cleanup($val)};
		next;
	}
}

sub nsym($) {
	my($nam) = @_;
	my $num = 0;
	do {
		$nam = dirname ($nam);
		$num++ if -l $nam;
	} while ($nam ne "" and $nam ne "/" and $nam ne ".");
	$num;
}

my %typ;
sub gtyp($) {
	my($x) = @_;
	return $typ{$x} if defined $typ{$x};
	my $y;
	if(-l $x) {
		$y = 2*nsym($x)+1;
	} elsif(-d _) {
		$y = 2*nsym($x);
	} else {
		$y = 999;
	}
	
	$typ{$x} = $y;
}

sub fmode() {
	#my $aa = gtyp $a;
	#my $bb = gtyp $b;
	gtyp($a) - gtyp($b) or length $a <=> length $b or $a cmp $b;
}

foreach $file(sort fmode keys %files) {
	$file =~ s#/+d1/+#/usr/#;
	my $ff = $file;

	next if $file !~ m#^/#;
	next if $file =~ m#/src/#;
	next if $file =~ m#^/dev/# and $file ^~ m#^/dev/MAKEDEV$#;
	next if $file =~ m#/tmp/# and not $ff =~ s#^(?:/var)?/tmp/[^/]+\.build[^/]*(?:/|$)#/#;
	next if length($ff) < 2;
	next if $ff =~ m#/perllocal.pod$#;
	next if $ff =~ m#^/var/?$#;
	next if $ff =~ m#^/var/tmp/?$#;
	next if $file =~ m#\.old$#i;
	next if $file =~ m#\.orig$#i;
	next if $file =~ m#\.bak$#i;
	if (! -l $file and -d $file) {
		print "%dir $ff\n";
	} elsif (-e $file) {
		if($ff =~ m#^/etc/# and $ff !~ m#^/etc/rc.d/#) {
			print "%config $ff\n";
		} else {
			print "$ff\n";
		}
	}
}
