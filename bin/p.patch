#!/bin/sh

set -e
trap 'usage; exit 1' 0

usage() {
cat >&2 <<END
Usage: $(basename $0)  -- Patchen externer Sourcen
       [ -d Paket ]
       [ -v origreleasename (base) ]
       [ -w neworigreleasename (=origreleasename) ] 
       [ -pX (Argument für patch) ]
       [ -z (gunzip) ]
       [ neue Versionsnummer ]
END
}

dir=
overs=base
nvers=
patchdepth=
zip=cat
force=

   eval set -- "$(getopt "d:v:w:hr:p:zf" "$@")"
   for i
   do
	   case "$i"
	   in
		   -h)
		       exit 1 ;;
		   -p)
			   shift; patchdepth="-p$1"; shift;;
		   -d)
			   shift; dir="$1"; shift;;
		   -f)
		   	   shift; force=y ;;
		   -z)
		   	   shift; zip=gunzip ;;
		   -v)
			   shift; overs="$1"; shift;;
		   -w)
			   shift; nvers="$1"; shift;;
		   --)
		   	   shift; break;
	   esac
   done

dir="$(p.name "$dir")"
test -n "$*"
if test -z "$nvers"; then nvers=$overs; fi

desc=$(echo $dir | sed -e 's/\//:/g' -e 's/:*$//')

if test -f "/usr/src/STATUS/checkout/$desc" ; then
    desc=$(sed  -e 's/[ 	].*//' "/usr/src/STATUS/checkout/$desc")
    what=$(echo $desc | sed -e 's/[:\/]/_/g' -e 's/_*$//')
else
    what=$(echo $dir | sed -e 's/\//_/g' -e 's/_*$//')
fi

export PRCS_REPOSITORY=/usr/src/archiv/prcs PRCS_LOGQUERY=1
trap '' 0
set -x

mkdir /tmp/$what.$$
cd /tmp/$what.$$
prcs checkout -f -r $overs.@ $what
cp $what.prj ../$what.prj.$$

if $zip | patch $patchdepth -E -l ; then
	echo OK.
	x=y
elif test -n "$force" ; then
	echo "Fehler... mache aber trotzdem weiter."
	x=x
else
	echo "Fehler... weiter?"
	read x </dev/tty
fi

if test "$x$force" != "n" ; then

prcs populate -f -d $what

perl -p -i -e '
   BEGIN { $s="'"$*"'"; $s = "Version $s" if $s ne ""; $s =~ s/"/'\''/g; }
   s/\(New-Version-Log \"\"\)/(New-Version-Log "$s")/ if $s ne "";
   s/^  \((.*)\(\)\)/  ($1() :no-keywords)/;
' $what.prj

prcs checkin -r $nvers $what </dev/tty
fi

cd ..
rm -rf $what.prj.$$ $what.$$ &
