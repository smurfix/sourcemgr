#!/bin/sh

###
### Dieses Skript baut aus Sourcen Programme.
### 
### Schritte:
# aus dem Archiv holen
# bauen
# installieren
# wieder wegwerfen.
## 

export PRCS_REPOSITORY=/archiv/src/prcs
export PATH=/usr/src/STATUS/bin:$PATH
ulimit -c 1000000
what=

r="\n"

usage() {
	cat >&2 <<END
Usage: $(basename $0)  -- Bauen und Installieren eines Programms
       [ -i (installiere fertiggebaute Programme) ]
       [ was_gebaut_werden_soll... ] 

Ohne "was_gebaut_werden_soll" wird alles gebaut, was noch nicht fertig ist.
Programme markiert man mit "redo was_gebaut_werden_soll" als unfertig.

Gebaut und installiert wird als normaler Benutzer.
Der Installer ruft automatisch "sudo" auf, das PW ist also das eigene.
END
}


set -- `getopt ihp: $*`
if test $? != 0
then
	usage
    exit 2
fi
doinstall=

for i ; do
        case "$i"
        in
				-h)
						usage; exit 2;;
                -i)
                        doinstall=y; shift;;
				-p)
						prefix=$2; shift; shift ;;
                --)
                        shift; break;;
        esac
done

cd /usr/src/STATUS
if test "$prefix" = "" ; then cat build ; else grep $prefix build; fi |
while read ver dir rest ; do 
	if test "$ver" = "*" ; then
		desc=$(echo $dir | sed -e 's/\//:/g' -e 's/:*$//')
		if test -f "done/$desc" ; then 
			echo "$desc: Fertig."
		elif test -f "to-install/$desc" -a -z "$doinstall" ; then 
			echo "$desc: Muß installiert werden."
		elif test -f "fail/$desc" ; then 
			echo "$desc: Hatte einen Fehler!"
		elif test -z "$doinstall" ; then
			echo "$desc: p.make -g ..."
			p.make -g "$dir"
		else
			echo "$desc: p.make -gi ..."
			p.make -gi "$dir"
		fi
	fi
done

exit 0
		if test -z "$noupdate" -a -f STATUS/legacy/$tag ; then # {
			echo "will not be done."
			if test -f STATUS/out/$tag ; then : ; else # {
				gen.flist <STATUS/legacy/$tag | sort -u > STATUS/out/$tag &
			fi # }
		elif test -z "$noupdate" -a -f STATUS/done/$tag ; then # }{
			echo -en "done.$r                                  \r"
		elif test -f STATUS/work/$tag ; then # }{
			echo -n "in progress: "
			head -1 STATUS/work/$tag 
		elif test -z "$noupdate" -a -f STATUS/fail/$tag ; then # }{
			echo -n "had problems, please fix: "
			head -1 STATUS/fail/$tag 
		elif test -f STATUS/to-install/$tag -a -z "$nomake" ; then # }{
			echo "needs to get installed."
		elif test ! -f STATUS/to-install/$tag -a -n "$nomake" ; then # }{
			if test ! -f STATUS/done/$tag ; then # {
				echo "needs to be built."
			else # }{
				echo -ne "done.$r                                  \r"
			fi # }
		else # }{
			if test -f STATUS/to-install/$tag ; then # {
				mv STATUS/to-install/$tag STATUS/work/$tag 
				echo '# RESTART' $(hostname) $$ >> STATUS/work/$tag
			else # }{
				echo $(hostname) $$ > STATUS/work/$tag
				echo "Go to work!"
			fi # }

			fn=$(expr $fn + 1)
			mkfifo /tmp/ff.$$.$fn
			( while read a ; do echo "# $a" ; done < /tmp/ff.$$.$fn | tee -a STATUS/work/$tag ) &
			sleep 1
			exec > /tmp/ff.$$.$fn 2>&1

			if test -f STATUS/checkout/$tag ; then # {
				read what comp inst < STATUS/checkout/$tag
				goto=$(dirname $dir)
				out=$(basename $dir)
				mkdir -p $goto
				where=" -d $out"
				if test -n "$pv" ; then # {
					ptag=$(echo $what | sed -e 's|[:/]|_|g')
				fi # }
			else # }{
				what=$dir
				where=""
				comp="compile"
				inst="install"
				goto=.
				out=$dir
				rel=
			fi # }
			if test -z "$noupdate" ; then # {
				if test -n "$pv" ; then # {
					if test -f $dir/$ptag.prj ; then # {
						echo "+++ $dir +++ NO update ($where $what $ver)"
						# cd $dir; prcs update -r "$pv.@" $ptag
						# did=$?;
						did=0
					elif test -n "$cvsonly" ; then # }{
						echo "KEIN PRCS";
						did=1
					else # }{
						echo "+++ $dir +++ $out prcs checkout $pv $ptag"
						if test -n "$ver" ; then ver="-r $ver"; fi
						# XXXXXXXXX
							ver=
						# XXXXXXXXX
						mkdir -p $dir; cd $dir
						prcs checkout -f -r "$pv.@" $ptag
						did=$?
						touch AUTOREMOVE
					fi # }
				else # }{
					if test -d $dir/CVS ; then # {
						# cd $dir; cvs update -r $ver;
						# did=$?;
						did=0
					elif test -n "$prcsonly" ; then # }{
						echo "KEIN CVS";
						did=1
					else # }{
						echo "+++ $dir +++ $goto cvs checkout $rel $where $what $ver"
						if test -n "$ver" ; then ver="-r $ver"; fi
						# XXXXXXXXX
							ver=
						# XXXXXXXXX
						cd $goto; cvs -Q checkout $ver $where $what
						did=$?
						touch $out/AUTOREMOVE
					fi # }
				fi # }
			else # }{
				did=0
			fi # }
			cd /usr/src
			if test $did = 0 -a -d $dir ; then # {
				echo "+++ $dir +++ Make $comp"
				if test -n "$nomake" || make -C $dir -f Makefile.Linux $comp </dev/null ; then # {
					if test -n "$nomake" ; then # {
						echo "+++ $dir +++ Make $inst"
						if make -C $dir LD_PRELOAD=/usr/lib/log-install.so LOGFILE=/usr/src/STATUS/work/$tag -f Makefile.Linux $inst </dev/null ; then # {
							mv STATUS/work/$tag STATUS/done/$tag
							echo "+++ $dir +++ Release"
						if test ! -f STATUS/keep/$tag -a -f $dir/AUTOREMOVE ; then # {
							if test -n "$pv" ; then # {
								cd $dir
								echo NO prcs checkin -f -r "$pv.@" $ptag
								cd /usr/src
								rm -rf $dir
								cd /usr/src
								set +e
							else # }{
								yes n | cvs release $dir && rm -rf $dir || echo "*** $dir *** Release failed"
								:
							fi # }
						fi # }
###
							echo "Building file list in background."
							(
								(	gen.flist <STATUS/done/$tag
#									if test -f STATUS/out/$tag ; then cat STATUS/out/$tag ; fi
								)	| sort -u > STATUS/out/new.$tag 
								mv -f STATUS/out/new.$tag STATUS/out/$tag
							) &
						else # }{
							echo "*** $dir *** Make install failed"
							mv STATUS/work/$tag STATUS/fail/$tag
						fi # }
					else # }{
						echo "*** $dir *** Make install : ROOT!"
						mv STATUS/work/$tag STATUS/to-install/$tag
					fi # }
				else # }{
					echo "*** $dir *** Make failed"
					mv STATUS/work/$tag STATUS/fail/$tag
				fi # }
			else # }{
				echo "*** $dir *** Checkout failed"
				echo "Checkout failed" >STATUS/fail/$tag
				mv STATUS/work/$tag STATUS/fail/$tag
			fi # }
			exec >&3 2>&1
			rm /tmp/ff.$$.$fn
		fi # }
	    echo ""
	fi # }
done  < STATUS/build  # }

echo "Done."

exit

echo "Building distfiles."

set -x
./gen.distfile | tee STATUS/distfiles | while read a ; do 
	rdist -f STATUS/dist/$a
done 

rm -f "$sl"

cd "$ld"
